<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hysteria</title>
    <link>https://icewinechen.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Keep Alive</description>
    <pubDate>Mon, 25 Feb 2019 15:33:04 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>碎碎念</title>
      <link>https://icewinechen.com/2019/02/25/%E9%9D%A2%E7%BB%8F/</link>
      <guid>https://icewinechen.com/2019/02/25/%E9%9D%A2%E7%BB%8F/</guid>
      <pubDate>Mon, 25 Feb 2019 14:23:28 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近出的事也确实比较多……没什么开心事，糟心事一大坨。首先还得是这个要亲命的睡眠……说实话实在是不知道怎么解决，主要伴随以下状况:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;睡 不 着！！！&lt;/li&gt;
&lt;li&gt;晚上睡着的话半夜准醒几次，基本呈每两小时醒一次，12点左右睡会在2-4-6-8各节点醒，在学校在家都没什么区别，都是睡俩小时醒一次&lt;/li&gt;
&lt;li&gt;中午觉躺床上必鬼压床，闹铃响了眼皮死活睁不开，伴随失重感，感觉超玄妙，飘飘欲仙？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;反正不清楚是因为烦躁还是焦虑导致的，而且更关键的问题是我不知道到底是什么事搞的我很焦虑，因为所有手头的事都搞的我很焦虑。感觉睡前看番挺缓解烦躁感的，但是还是没用，甚至喝牛奶大法也失去了魔力，感觉我这个睡眠没救了。恰逢早起老师又批判了一下这个早上到实验室太晚的风气，感觉坐在实验室大门边的我又中枪了。嗯，中枪总是来得很恰好，只要我一走神或者玩手机老师准进实验室，也习惯了。说实话我中午挺不想在实验室趴着睡的，不是脖子疼就是腰疼，感觉这么下去迟早一身毛病，但是回屋睡又很浪费路上时间，健康与工作真是难两全啊。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近出的事也确实比较多……没什么开心事，糟心事一大坨。首先还得是这个要亲命的睡眠……说实话实在是不知道怎么解决，主要伴随以下状况:</p><ul><li>睡 不 着！！！</li><li>晚上睡着的话半夜准醒几次，基本呈每两小时醒一次，12点左右睡会在2-4-6-8各节点醒，在学校在家都没什么区别，都是睡俩小时醒一次</li><li>中午觉躺床上必鬼压床，闹铃响了眼皮死活睁不开，伴随失重感，感觉超玄妙，飘飘欲仙？</li></ul><p>反正不清楚是因为烦躁还是焦虑导致的，而且更关键的问题是我不知道到底是什么事搞的我很焦虑，因为所有手头的事都搞的我很焦虑。感觉睡前看番挺缓解烦躁感的，但是还是没用，甚至喝牛奶大法也失去了魔力，感觉我这个睡眠没救了。恰逢早起老师又批判了一下这个早上到实验室太晚的风气，感觉坐在实验室大门边的我又中枪了。嗯，中枪总是来得很恰好，只要我一走神或者玩手机老师准进实验室，也习惯了。说实话我中午挺不想在实验室趴着睡的，不是脖子疼就是腰疼，感觉这么下去迟早一身毛病，但是回屋睡又很浪费路上时间，健康与工作真是难两全啊。</p><a id="more"></a><p>在这种很烦躁的时间里，我觉得有必要整理一下某些面试的经验之谈，想到马上要去找工作，就感觉很烦。一方面很久不抓基础了，高级特性写的多，基础忘得越干净。写代码越是追求赶紧完工，好多细节就会忽略掉，十分惆怅。不得不说平衡好实验室做事和找工作准备是一件挺难的事，在只剩半年的情况下还真得加把劲复习一下，但是哪来的时间复习啊……还好现在大概是可以在实验室刷题了，否则可以说是更痛不欲生了。但是好多时候刷真只是为了刷，很多地方刷的太草了，连dp的状态方程都懒得推，看到二维dp都不太想做，一点都不想动脑子，全靠一手n年前刷oj的印象云思考瞎解题，跟背书实在没区别，感觉这样下去很是糟糕。</p><p>联想起以前头条面试，不得不感叹以前缺啥现在果然还是缺啥。说到这我觉得一是总结二是分析，想到哪算哪，也给自己之后校招打个警钟吧。毕竟以前头条面试是我觉得我以前面过那些公司给我印象最深的，没记错的话实习生面试足足面了快两个半小时，可以说是很疲惫了。两面技术面，问的都还算切入要点。印象里一面的面试官好年轻啊，感觉也就26，7岁的感觉。问题比较侧重简历，简单问了很多简历上项目的问题，用了什么工具，性能大概如何，在工具和语言上的掌握程度，一些语言的基础问题，顺带问了问一些简单的系统指令，编译原理，框架原理，框架内的机制，再到网络原理到优化，问的这些基础问题比较全面，感觉比较符合官网上那个“我们的员工不给自己设限”的原则，工程算法两手抓，至少让我明白了要对这些基础扣的细一点。其实感觉当时有些地方答的真是不太好，基本都是会多少说多少，还是暴露了一直以来的半吊子基础……毕竟有jb家神奇工具，所有问题都是debug去解决，但是感觉一些实现上非常基础的东西还是需要记牢，要不然答的磕磕绊绊的……话说感觉到现在我的python基础都不怎么样，都是写到哪用到哪，有必要最近系统的复习一下这些问题，从机制上慢慢理解吧，虽然我一直不太明白高级语言纠结基础有什么意义，可能也就在实际生产中省一些时间，毕竟高级抽象模块使人智障啊，但是毕竟面试确实很看重这个。最后手撕一道题，样例考虑的不是很全，从场景到排序，无脑快排，又没反应过来取解释什么时候复杂度最低，感觉又减分了。但是整体面下来蛮流畅的，没有其他公司面试的那种割裂感，面试官人很nice，挺和蔼的，感觉果然还是2 30岁这一代人比较好交流，我真的没有在黑谁啊？整个一面差不多都有一个小时了，比我之前实习面试的时间都长不少，总体感觉非常舒服。看着边上另一个面试官面的小哥一面结束撤了，自己苟到了二面。</p><p>二面也差不多，也是和一面一样，开头先关注简历，不过这次问的确实就比较细致了，从一些项目上的方案选择到算法原理，问的都比较详尽。结果又在一个算法细节上卡住了，忘了原理了，囧……还好之后问的一些具体结构和设计原理还算是解释出来了，否则我觉得直接可以回家了……之后二面面试官很nice的关于简历上的内容指出了一些之前工作的不足，这点让我觉得挺有收获的，脱离企业生产环境和不以性能优先的项目可能参考意义不大。最后一道dp，写对了以后人家说你为啥这么写呢……结果又改错了……跟人解释了状态方程，人家很纳闷为啥知道这么做还是改错了呢……现在回想起来，当天状态真是不太好……完全不动脑子，怕是给人留下了背题的不好印象。这一点真实反思，如何做到面试不紧张还真是个需要练习的活。总体来说和一面比起来问的内容更具体，更关注你做了什么，你为什么这么做，你想做什么，给人挺多思考空间的，其实这样的话当时被拒了也没啥遗憾，因为确实这场面试给我留下了很深的印象，在二面的一小时中思考了很多问题。总体来说面试难度很合理，比我预想的好，我自己确实一没怎么准备二是确实对基础关注不够，三是紧张状态下动不了脑子。技术面完后觉得跪了，感觉见不到hr了。不过之后居然还给了我个hr面的机会，属实感动。</p><p>这场面试在我当时幼小的心灵上确实留下了很深的印象……大大小小现在也面过不少实习面试了，但是感觉头条的实习面试是最认真的，当时大概人员流动没有现在这么大，但是对每一场面试都确实用心，给我留下了非常好的印象。其他的面试大概都只让我明白了写简历很重要这件事，但是这个面试基本对我以后学习方向这些都产生了影响，不得不说还是挺感谢这段经历的。</p><p>总结一下就是研究生生涯快结束了，最近急需背书，呃是真的背书，目前最缺失的就是马上答出所有基础问题这一套，这一条在大三大四这两年的实习面试中已经认识到无数次了，然而上研以后并没啥时间巩固这些缺陷，一方面大概是确实没时间，大部分时间都在读论文，干工程和深度瞎搞上度过，二是有空余时间都用在缓解焦虑上了……然而现在没啥理由拖沓了，每天做做题看看书督促下自己吧……咱的特征还没提完，不看书的话只会比以前更惨。说真的以前就不怎么记，现在估计更忘光了……需要在接下来的时间督促自己，过几天制定一个每日学习计划吧，是时候准备一下了。</p>]]></content:encoded>
      
      <comments>https://icewinechen.com/2019/02/25/%E9%9D%A2%E7%BB%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>动漫崩坏二三事</title>
      <link>https://icewinechen.com/2018/12/16/molder/</link>
      <guid>https://icewinechen.com/2018/12/16/molder/</guid>
      <pubDate>Sun, 16 Dec 2018 14:46:38 GMT</pubDate>
      <description>
      
        &lt;p&gt;关于动画是否崩坏这个问题，我觉得各有各的看法，但是有些梗确实有点被玩坏了，比如惨遭A1动画化之流，大河内又来了之类的烂梗。A1那么大的公司，下面的工作室一大票，不谈外包作画之流的情况，也很难直接界定是否某个社的制作就一定作画崩或是剧情崩，另外当年四谎哭的稀里哗啦的人也还是别说A1什么了，那是人家A1做的。大河内作为脚本家的的东西如果看单集水准，并不算差，甚至算中上水平没问题，很多时候所谓的放飞自我是系列构成的问题，不说他没锅，但他也不是所有情况下都要背大锅，当然一言不合死一地(高 中 生 建 国)这种事情玩多了确实烦。同理适用于脚本和系列构成，当然了某些监制或是系列构成的水准确实有够低到看到这个人我就不想看他的作品……但是这毕竟还是及其个例。哪怕是古桥一浩这种级别的演出家，也做出过京都大火篇这种非常微妙的东西。所以在这我觉得应该简单科普/划分一下崩这种概念，毕竟什么都有人喊崩或是神作确实有点烦，因为作品并不是不合个人的胃口就叫崩，否则口碑两极分化的作品又该怎么解释呢？当然了，我们要聊的重头戏还得是剧情崩坏。&lt;/p&gt;
&lt;p&gt;作画崩坏，这一点很容易判断，动态画面/近景的崩坏非常容易看的出来，当然动画崩坏也有很多可能打着web系作画的幌子(也或许真的是web画风)，但是很多扭曲不连贯且形变夸张的确实大概率是崩坏就对了。说到这可以很简单拿两个地方举例，首先就是著名的火影387佩恩崩坏事件。&lt;br&gt;&lt;img src=&quot;http://wx2.sinaimg.cn/mw690/005uXRWzly1fy8zkszcifj30fs09kaak.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;你能体会我的痛苦么？反正我当初看387的时候全程懵逼。&lt;/p&gt;
&lt;p&gt;这点看了山下清悟关于387集之后的访谈，这一集松本宪生也掺了一脚，但是疾风传里他的表现很稳定，火影的动画水准确实也还好，但是这一集以画嗨了解释很显然不太和逻辑。火影动画的打斗分镜很多都是若林厚史的分镜，但是387的动态场景就异常扭曲，画出来的场景完全不一样。同理还有一个就是fate apocrypha(我不确定我打的对不对啊)里面迦尔纳和齐格单挑的那一集，整个动态打斗部分人脸都是扭曲的，这一集当时引发了巨大的讨论度，但是我倾向于认为那就是崩了，因为整部剧做的一直都很崩……关于好的动态场景是什么标准，看看一拳超人第一季，骨头的各种作品，或是中村丰早中期(星际牛仔，银河美少年到超人幻想、小英雄神野之战)参与的就完事了，最典型的还是无皇刃谭最后罗兰和无名的打戏，动态场景不说前后景和线型的表现力以及是否符合视觉原理，起码别看起来有一种卡帧的廉价感和不符合视觉逻辑的扭曲就可以。早期很多手绘作品的打斗前后景真实感做的不错，结果到后来cg做的是流畅了，结果视觉效果反而差了。动态作画崩坏对于一些打斗场景多而且为卖点的片子简直是灾难，这点我觉得大家都很容易看的出，所以没必要细说了。但是切记不要把高速打斗中某一帧你随手一截就拿来证明他崩，这个没什么说服力。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>关于动画是否崩坏这个问题，我觉得各有各的看法，但是有些梗确实有点被玩坏了，比如惨遭A1动画化之流，大河内又来了之类的烂梗。A1那么大的公司，下面的工作室一大票，不谈外包作画之流的情况，也很难直接界定是否某个社的制作就一定作画崩或是剧情崩，另外当年四谎哭的稀里哗啦的人也还是别说A1什么了，那是人家A1做的。大河内作为脚本家的的东西如果看单集水准，并不算差，甚至算中上水平没问题，很多时候所谓的放飞自我是系列构成的问题，不说他没锅，但他也不是所有情况下都要背大锅，当然一言不合死一地(高 中 生 建 国)这种事情玩多了确实烦。同理适用于脚本和系列构成，当然了某些监制或是系列构成的水准确实有够低到看到这个人我就不想看他的作品……但是这毕竟还是及其个例。哪怕是古桥一浩这种级别的演出家，也做出过京都大火篇这种非常微妙的东西。所以在这我觉得应该简单科普/划分一下崩这种概念，毕竟什么都有人喊崩或是神作确实有点烦，因为作品并不是不合个人的胃口就叫崩，否则口碑两极分化的作品又该怎么解释呢？当然了，我们要聊的重头戏还得是剧情崩坏。</p><p>作画崩坏，这一点很容易判断，动态画面/近景的崩坏非常容易看的出来，当然动画崩坏也有很多可能打着web系作画的幌子(也或许真的是web画风)，但是很多扭曲不连贯且形变夸张的确实大概率是崩坏就对了。说到这可以很简单拿两个地方举例，首先就是著名的火影387佩恩崩坏事件。<br><img src="http://wx2.sinaimg.cn/mw690/005uXRWzly1fy8zkszcifj30fs09kaak.jpg" alt=""></p><p>你能体会我的痛苦么？反正我当初看387的时候全程懵逼。</p><p>这点看了山下清悟关于387集之后的访谈，这一集松本宪生也掺了一脚，但是疾风传里他的表现很稳定，火影的动画水准确实也还好，但是这一集以画嗨了解释很显然不太和逻辑。火影动画的打斗分镜很多都是若林厚史的分镜，但是387的动态场景就异常扭曲，画出来的场景完全不一样。同理还有一个就是fate apocrypha(我不确定我打的对不对啊)里面迦尔纳和齐格单挑的那一集，整个动态打斗部分人脸都是扭曲的，这一集当时引发了巨大的讨论度，但是我倾向于认为那就是崩了，因为整部剧做的一直都很崩……关于好的动态场景是什么标准，看看一拳超人第一季，骨头的各种作品，或是中村丰早中期(星际牛仔，银河美少年到超人幻想、小英雄神野之战)参与的就完事了，最典型的还是无皇刃谭最后罗兰和无名的打戏，动态场景不说前后景和线型的表现力以及是否符合视觉原理，起码别看起来有一种卡帧的廉价感和不符合视觉逻辑的扭曲就可以。早期很多手绘作品的打斗前后景真实感做的不错，结果到后来cg做的是流畅了，结果视觉效果反而差了。动态作画崩坏对于一些打斗场景多而且为卖点的片子简直是灾难，这点我觉得大家都很容易看的出，所以没必要细说了。但是切记不要把高速打斗中某一帧你随手一截就拿来证明他崩，这个没什么说服力。</p><a id="more"></a><p>近景的崩坏就更简单，作画做的差的连续几张近景同一个角度都可能把人物的脸做的让人认不出是同一个人。还是拿名场景举例：<br><img src="http://wx1.sinaimg.cn/mw690/005uXRWzly1fy8zkcd3ifj31o30u07wl.jpg" alt=""></p><p><img src="http://wx2.sinaimg.cn/mw690/005uXRWzly1fy90c0jionj317i0u0kjn.jpg" alt=""></p><p>呃……怎么说呢，killer queen小猫咪？你是吉良吉影么？静态的静景崩坏确实我是很难忍受，这个基本是我评价作品作画是不是崩了的主要指标。远景画的粗糙一些可以接受，但是很多我们所谓制作精良的作品，远景的人脸和空间感做的也不含糊，这点京吹可以狂欢了，作画质量属实是高。从12到15年连续的轻音，日常，冰菓，京吹，都是属于制作没什么毛病的作品，紫罗兰更是可以算tv动画制作水平的前几名了。作画差的实在太多了，尤其是近些年的劣质轻改，我觉得输都数不过来，很少能让我熬到3集弃。这点那些吐槽up主会一个个揪着喷的，他们是专业的，我是实在没法一个一个揪出来喷。另外tv的质量无法跟剧场版对比，顺带庵野秀明的东西除外，不适合上述所有定律，直接放原稿甚至线稿搞意识流这些操作我真的很难评价，飞跃巅峰1的最后看的我很爽，但是eva的意识流最后看的我很生气。</p><p>我们的重头戏还是得谈谈剧情崩坏的问题。这一点肯定是夹带个人感情私货的，比如说早期gainax的那些超级系作品(这里可能和有些人定义有分歧)，有些时候是不讲逻辑的，但是看着就是非常有激情，当然这也确实是演出和脚本给力，另一方面，我也经常会给老作品加一点点分数，虽然不得不说老作品的质量也确实是高，但是某些类似手法在后来对我来说就确实行不通了，当然精神内核不一致，但是看爽片第一要素其实还是爽。</p><p>在这我首先夹带一段私货，关于系列作剧情是否崩掉，我的对比会优先选这么三部作品：浪客剑心tv，追忆篇和星霜篇。这三篇口碑非常复杂，tv版中庸，原创剧情除外，漫画剧情还原的比较到位，所以评价中规中矩。追忆篇和星霜篇在制作的角度上，我认为都是动画史上排在前列的水平，古桥一浩确实也是厉害，但是追忆篇口碑爆炸，星霜篇极端两极分化。神谷薰作为我最喜欢的女性角色之一，在星霜篇里莫名其妙的挂掉了，这一点让我也很不满，所以可能有我个人感情掺杂因素，但是星霜篇的剧情绝对是崩坏的代表之一，因为过于追求靠近先前大获成功的追忆篇的宿命感。以薰的视角讲述故事，我可以接受剑心最后的悲剧结局，但是整个故事远离了原作的氛围和人物性格，强行为了体现历史洪流而把人物性格改变了。当然星霜篇独立来看绝对是好片，但是在我内心这个就是剧情崩坏的微妙标杆，你不能在系列作中大幅改动角色性格。</p><p>至于单部作品，我们还是从大河内和冈妈的钢钉开始谈谈。大河内先生和冈妈非常喜欢发便当，但是在很多作品里无谓死人太多，这才是最大的问题，很多角色便当根本不会对剧情有推动(说的就是你，奥尔加，不要停下来啊！尤菲的死除外，可以说是大河内少有发的有用的便当)。大河内还有一独门大招：建国。这一点其实不是不能忍，因为本身作品不是严肃写实系，一般都是能力系，但是大河内先生对于之后的剧情控制就崩塌了。为什么，剧情写的实在太大了，唯一巅峰鲁路修中间取了个巧，把镇魂曲埋到最后交代，但是其他作品都是平铺直叙，被过于奔放的展开拖到死。这一点很多看似黑深残的作品也是一样，所以遇到这类展开过度又集数紧张的东西，我实在不推荐去看，因为大概率收不回来(说的就是你，东京喰种)，除非是庞大如jojo的系列，团灭之海后面都能交代出sbr这种故事，但是jojo这种级别的作品毕竟少之又少，我现在都怀疑团灭之海播完以后会不会被愤怒的动画党拒绝买bd被大卫社毙掉飙马野郎，顺带对巨人的结局，我真的不是很抱有信心，除非谏山创黑深残走到底，青年漫还是有这个底气。但是剧情崩坏一定不是以便当说事的，有些便当的伏笔和节奏埋得很到位，比如大河内先生的gc，被人喷了那么多年，但是本身设定就注定了很多问题，我不知道有什么可喷的，能力系的剧情很多问题都不应该以写实的视角看，当然了国家队随便喷吧，伏笔埋了一堆收不回来还要靠天元突破救场的被喷也没问题。</p><p>另外就是日常作的剧情问题。日常作写实就好，没什么可说。整体来说就是这样，希望大家以后别见啥不合我意就按上一个崩的帽子，这样实在不太好……</p>]]></content:encoded>
      
      <comments>https://icewinechen.com/2018/12/16/molder/#disqus_thread</comments>
    </item>
    
    <item>
      <title>c++ 并行设计</title>
      <link>https://icewinechen.com/2018/12/16/concurrency/</link>
      <guid>https://icewinechen.com/2018/12/16/concurrency/</guid>
      <pubDate>Sun, 16 Dec 2018 13:43:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;motivation&quot;&gt;&lt;a href=&quot;#motivation&quot; class=&quot;headerlink&quot; title=&quot;motivation&quot;&gt;&lt;/a&gt;motivation&lt;/h2&gt;&lt;p&gt;最近接了套实时sdk的活……由于引入了工程量巨大的tensor库和人家打包好
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="motivation"><a href="#motivation" class="headerlink" title="motivation"></a>motivation</h2><p>最近接了套实时sdk的活……由于引入了工程量巨大的tensor库和人家打包好的算法库，不是很想看源码，但是黑箱的调用和测试过程中被三方库的线程和内存管理搞得非常烦躁。看看源码，于是乎顺便写一篇这个来清醒一下脑子，整理一下思路</p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p><thread> <mutex> <condition_variable> 名字就暴露了一切……</condition_variable></mutex></thread></p><h2 id="关于线程管理"><a href="#关于线程管理" class="headerlink" title="关于线程管理"></a>关于线程管理</h2><h3 id="关于调用匿名函数作为thread对象"><a href="#关于调用匿名函数作为thread对象" class="headerlink" title="关于调用匿名函数作为thread对象"></a>关于调用匿名函数作为thread对象</h3><p>引入lambda表达式解决问题即可。<br>直接引入匿名构造会被视作调用函数，引发初始化问题。比如std::thread _mythread(func())会被视为一个返回值为thread的名为_mythread的函数，传了一个func()的返回类型的参。正确方法是利用lambda表达式构建匿名函数:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::thread _mythread([param <span class="built_in">list</span>]&#123;</span><br><span class="line">    dosomething();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>或者是直接利用标准对象初始化符号std::thread _mythread{func()}</p><h3 id="join和detach"><a href="#join和detach" class="headerlink" title="join和detach"></a>join和detach</h3><p>join的引入时间非常重要，线程池毕竟不是万能的……项目中引入了三方线程池，不确定是否安全或是性能提升，还需要测试。detach直接将线程从队列分离，不再被引用，时间同样很重要，否则有造成已经release掉的内存访问的风险。可以try/catch保证给join或是detach的位置确保join机制没问题</p><h3 id="同一操作接受不同的输入"><a href="#同一操作接受不同的输入" class="headerlink" title="同一操作接受不同的输入"></a>同一操作接受不同的输入</h3><p>比如要同时编辑多个文档，编辑文档的函数可以定义为docu(),可以在里面新引入thread,设置thread(docu,new document),这样不会引发线程安全问题，因为虽然同样操作，但是访问不同资源</p><h3 id="传引用作参"><a href="#传引用作参" class="headerlink" title="传引用作参"></a>传引用作参</h3><p>例如void update_data_for_widget(widget_id w,widget_data&amp; data);<br>我们直接在调用时传实参是一个widget_data类型的实参，会传递一个拷贝，类型检验会报错，这时候需要传std::ref(实参)，这样传递的是变量的引用，而不是一个拷贝后的引用</p><h3 id="move"><a href="#move" class="headerlink" title="move"></a>move</h3><p>直接转移线程所有权，同样适用于线程敏感性的容器操作，比如构建一个thread vector。这种自动化构建流程是独立的,结果只会受到共同访问资源的影响,把所有创建的线程join即可<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">std:</span><span class="symbol">:for_each</span>(threads.<span class="keyword">begin</span>(),threads.<span class="keyword">end</span>(),<span class="symbol">std:</span><span class="symbol">:mem_fn</span>(&amp;<span class="symbol">std:</span><span class="symbol">:thread</span><span class="symbol">:</span><span class="symbol">:join</span>))</span><br></pre></td></tr></table></figure></p><h3 id="保证算法并行的泛型"><a href="#保证算法并行的泛型" class="headerlink" title="保证算法并行的泛型"></a>保证算法并行的泛型</h3><p>引入泛型，可以保证分割的任务构造函数用的类型连贯，避免出现类型不匹配造成的精度损失</p><h3 id="线程识别"><a href="#线程识别" class="headerlink" title="线程识别"></a>线程识别</h3><p>线程识别类型是std::thread::id,可以直接对线程类实例调用get_id()方法获取。不过要注意，如果两个thread实例调用get_id()后相等，可能是同一线程，但是也可能都是空的线程。也可以更粗暴，直接一个个扔进std::hash<std::thread::id>这样的容器，用id作为无序容器的键值。</std::thread::id></p><p>具体的输出结果是严格依赖于具体实现的，C++标准的唯一要求就是要保证ID比较结果相等的<br>线程，必须有相同的输出。</p><h2 id="资源访问：锁的操作"><a href="#资源访问：锁的操作" class="headerlink" title="资源访问：锁的操作"></a>资源访问：锁的操作</h2><p>简单来说，上锁保证访问资源不会被n个同时访问的修改申请导致共同访问区的资源内容混乱，这可能导致修改共享数据，导致不变量破坏后依然不稳定，无法保持不变量的形式，导致存储的数据结构永久损坏，最后程序崩溃。bug重灾区，请小心谨慎。</p><h3 id="数据竞争"><a href="#数据竞争" class="headerlink" title="数据竞争"></a>数据竞争</h3><p>并发的修稿一个独立对象（资源访问区的不变量）。也可以通过细心规划线程分配，保证不变量的稳定性从而实现无锁，但是很困难。暂时还没试过……但是无脑上mutex和lock也会存在死锁问题。</p><h3 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h3><p>利用std::mutex创建互斥量，调用lock()上锁。但是每次都lock unlock不符合RAII哲学，所以需要lock_guard()即可以靠调用其析构解决这个问题，析构时自己解锁即可。通常情况下，互斥量和要保护的数据放在一个类里，并且作为private量。一些需要考虑上锁互斥的函数同样放在该类里，所有类内访问数据的方法都应该上锁，符合oop的设计原则，而不是定义全局变量，避免引发各种奇怪的问题。</p><p>这里有一个问题：当其中一个成员函数返回的是保护数据的指针或引用时，会破坏对数据的保护。具有访问能力的指针或引用可以访问(并可能修改)被保护的数据，而不会被互斥锁限制。互斥量保护的数据需要对接口的设计相当谨慎，要确保互斥量能锁住任何对保护数据的访问，并且不留后门。只要没有成员函数通过返回值或者输出参数的形式向其调用者返回指向受保护数据的指针或引用，数据就是安全的。</p><h3 id="接口内部的线程安全"><a href="#接口内部的线程安全" class="headerlink" title="接口内部的线程安全"></a>接口内部的线程安全</h3><p>处理接口内部的条件竞争:首先需要确保操作中资源访问区在并发中是安全的，比如双链表删除节点中的不变量变化过程中，删除的节点以及其前后节点不能被并行访问，必须在增删node的情况下保护整个数据结构。</p><p>通用的解决方案是重新设计接口逻辑。简单的异常捕获会让函数在条件竞争为false时变得没有调用意义，需要通过改变设计逻辑避免这个问题。比如对于栈而言，同时可能有多个线程访问stack内的值，然后调用pop或者top，这样的问题很难定位，可以通过对pop/top()操作直接上锁控制访问。如果要避免内存限制导致的pop()值丢失，重载stack.pop()，重载之后再内部上锁后可以返回一个shared_ptr指向栈顶指针。</p><h3 id="避免deadlock的一般方案"><a href="#避免deadlock的一般方案" class="headerlink" title="避免deadlock的一般方案"></a>避免deadlock的一般方案</h3><p>不同互斥量选择相同顺序上锁。不过c++11标准库的lock和lock_guard(就是boost里引过来的)可以一次锁住多个互斥量。lock_guard的初始化:std::lock_guard lck_name(mutex x)，构造直接引入互斥量。lock函数直接lock(mutex x)锁住互斥量。不同于mutex.lock()和unlock()方法，标准库std::lock()函数调用时不需要对应unlock()。</p><p>另外，对同一互斥量在线程内多次上锁，互斥量类型要用recursive_mutex。</p><h3 id="避免死锁的建议"><a href="#避免死锁的建议" class="headerlink" title="避免死锁的建议"></a>避免死锁的建议</h3><p>根据c++ concurrency的推荐，有以下几点需要注意：</p><ul><li><p>避免嵌套锁<br>如果每个线程都只上一把锁，就不会死锁。如果需要保护多个数据操作，选择std::lock对多个互斥量上锁。</p></li><li><p>持有锁的控制权的情况下调用未知操作<br>未知操作可能包含线程锁，这样会违背上一点，因为会造成嵌套锁。</p></li><li><p>对资源访问的线程的所有操作以同样的顺序上锁<br>比如对双链表的删除，同时会访问三个node，这时候需要在线程的定义上都用固定顺序上锁，比如b节点删除，A节点是b节点的front，c是b的next，这时候可以定义线程先锁住a才能访问b的锁，锁住b才能访问c的锁</p></li><li><p>使用层次锁<br>使用层次锁，遵守高层次-&gt;低层次上锁的顺序才可以运行，否则直接抛出异常。虽然hierarchical_mutex没有标准库实现，但是只需要外部能通过优先级的getter访问到即可实现</p></li></ul><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>比如stack的pop和top操作，这种设计很可能在多线程条件下出现一个问题：多个线程对象的操作在top访问时top没执行完，虽然应该每次访问的top值不一样，但是因为top没执行完还是会出现一样的值，逻辑错误，或者两次top同时导致想弹出的值没能存下来。这个问题是由于stack内部的接口设计导致的，所以改进只能重设接口关系。因此可以重载pop方法，让其弹出指向一个shared_ptr，用shared_ptr保存这个弹出值。</p><h3 id="关于condition的调用"><a href="#关于condition的调用" class="headerlink" title="关于condition的调用"></a>关于condition的调用</h3><p>定义一个condition_variable的示例,这个对象可以直接调用wait方法，之后等待某处的notify调用时唤醒。在调用这个操作的线程运行到wait时就判断等待条件，返回true时继续持有锁，返回false则线程进入阻塞，等到下次notify时再次检验条件</p><h2 id="atomic的相关操作"><a href="#atomic的相关操作" class="headerlink" title="atomic的相关操作"></a>atomic的相关操作</h2>]]></content:encoded>
      
      <comments>https://icewinechen.com/2018/12/16/concurrency/#disqus_thread</comments>
    </item>
    
    <item>
      <title>android-bungumi</title>
      <link>https://icewinechen.com/2018/10/21/android-bungumi/</link>
      <guid>https://icewinechen.com/2018/10/21/android-bungumi/</guid>
      <pubDate>Sun, 21 Oct 2018 09:07:22 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;bangumi的官方移动端客户端实在是有点迷……于是乎最近准备搞一个第三方客户端。写的过程中有些时候由于api升级，和最早学习的时候变化不小，遇到各种问题……毕竟生疏，把遇到的一些小问题总结一下。&lt;/p&gt;
&lt;h2 id=&quot;关于推送&quot;&gt;&lt;a href=&quot;#关于推送&quot; clas
        
      
      </description>
      
      <content:encoded><![CDATA[<p>bangumi的官方移动端客户端实在是有点迷……于是乎最近准备搞一个第三方客户端。写的过程中有些时候由于api升级，和最早学习的时候变化不小，遇到各种问题……毕竟生疏，把遇到的一些小问题总结一下。</p><h2 id="关于推送"><a href="#关于推送" class="headerlink" title="关于推送"></a>关于推送</h2><p>8.0版本中的notify需要跟channel绑定，否则会报错。<br>关于注册一个通知：先注册一个manager，再注册一个channel，之后把notification的builder中加入channel，否则会报channel为null的错<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">String CHANNEL_ID = <span class="string">"my_channel_01"</span><span class="comment">;</span></span><br><span class="line">CharSequence name = <span class="string">"my_channel"</span><span class="comment">;</span></span><br><span class="line">String Description = <span class="string">"This is my channel"</span><span class="comment">;</span></span><br><span class="line">int importance = NotificationManager.IMPORTANCE_HIGH<span class="comment">;</span></span><br><span class="line">NotificationChannel mChannel = new NotificationChannel(CHANNEL_ID, name, importance)<span class="comment">;</span></span><br><span class="line">mChannel.setDescription(Description)<span class="comment">;</span></span><br><span class="line">mChannel.enableLights(true)<span class="comment">;</span></span><br><span class="line">mChannel.setLightColor(Color.RED)<span class="comment">;</span></span><br><span class="line">mChannel.enableVibration(true)<span class="comment">;</span></span><br><span class="line">mChannel.setVibrationPattern(new long[]&#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">300</span>, <span class="number">200</span>, <span class="number">400</span>&#125;)<span class="comment">;</span></span><br><span class="line">mChannel.setShowBadge(false)<span class="comment">;</span></span><br><span class="line">manager.createNotificationChannel(mChannel)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">Notification notification = new NotificationCompat.<span class="keyword">Builder(this,CHANNEL_ID).</span></span><br><span class="line"><span class="keyword"> </span>       setContentTitle(<span class="string">"Content"</span>).</span><br><span class="line">        setContentText(<span class="string">"here is something"</span>).</span><br><span class="line">        setWhen(System.currentTimeMillis()).</span><br><span class="line">        setSmallIcon(R.mipmap.ic_launcher).</span><br><span class="line">        setPriority(NotificationCompat.PRIORITY_MAX).</span><br><span class="line">        setLargeIcon(<span class="keyword">BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher)).</span></span><br><span class="line"><span class="keyword"> </span>       setAutoCancel(true).<span class="keyword">build();</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">manager.notify(1,notification);</span></span><br></pre></td></tr></table></figure></p><p>关于startActivityForResult(int requestcode,int resultcode,Intent data)<br>上一个活动的数据存在intent中，requestcode只是用于和start时的code比较，确认返回的是哪个活动</p><h2 id="音视频播放"><a href="#音视频播放" class="headerlink" title="音视频播放"></a>音视频播放</h2><p>释放音频是调用MediaPlayer.release()</p><p>释放视频调用VideoView.suspend()</p><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>轻量级框架OkHttp3,文档和samples很全，随时可以根据需要翻阅github上的文档</p><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><ul><li>子线程不能进行UI操作</li><li>测试后不知为啥，stringbuffer线程出现不安全情况，不知道啥情况，回头调试</li><li>OKhttp的get请求可以正常拿到字段</li><li>OKhttp GET流程：先建立client，之后建立一个request，调用Request.builder，之后构建response = client.newCall(request).execute(),得到get请求的响应<br>POST用FormBody.builder添加数据，之后正常bulder中调用一个post()即可</li></ul><h2 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h2><ul><li>由于androidUI线程不安全，需要引入异步</li><li>异步由四个部分组成：Message（线程中传递的消息类）,Handler,MessageQueue（每个线程中只有一个）和Looper</li></ul><h3 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h3><ul><li>便于在子线程返回一些ui操作结果</li><li>抽象类，使用时继承，构造中有三个泛型参数：Params,Progress(进度单位),Result</li><li>需要重写的方法：onPreExecute(),doInBackground() -&gt; 这个函数置入所有处理耗时请求及线程，但是依然不能进行UI操作，用于返回操作结果,onProgressUpdate(),onPostExecute()-&gt;根据返回的数据进行UI操作</li></ul><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>内部放置所有需要在后台执行的逻辑，逻辑为了调用一个asynctask定义的任务而服务</p><h2 id="material-UI"><a href="#material-UI" class="headerlink" title="material UI"></a>material UI</h2><p>调support.v7.widget.toolbar。调用之后，调用setSupportActionBar方法设置一个toolbar。刚接触material UI各种组件的写法，觉得应该总结一下。</p><h3 id="滑动菜单"><a href="#滑动菜单" class="headerlink" title="滑动菜单"></a>滑动菜单</h3><p>在布局文件中调用android.support.v4.widget.DrawerLayout组件，布局文件写好后，调用时需要创建一个DrawerLayout对象获取滑动布局，之后调用openDrawer(GravityCompat.START)渲染出滑动菜单</p><h3 id="滑动菜单布局"><a href="#滑动菜单布局" class="headerlink" title="滑动菜单布局"></a>滑动菜单布局</h3><p>除了调用DrawerLayout，需要再建一个滑出菜单的header部分和内容item部分，然后在主活动中分别定义每一项点击后的响应逻辑，代码如下，对item栏调用setNavigationItemSelectedListener。之后重写内部的onNavigationItemSelected中switch每一个栏对应的响应<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    Toolbar toolbar = findViewById(R.id.toolbar);</span><br><span class="line">    setSupportActionBar(toolbar);</span><br><span class="line">    mDrawerLayout = findViewById(R.id.drawer_layout);</span><br><span class="line">    navView = findViewById(R.id.nav_view);</span><br><span class="line">    ActionBar actionBar = getSupportActionBar();</span><br><span class="line">    <span class="keyword">if</span> (actionBar!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br><span class="line">        actionBar.setHomeAsUpIndicator(R.drawable.ic_menu);</span><br><span class="line">    &#125;</span><br><span class="line">    navView.setCheckedItem(R.id.nav_call);</span><br><span class="line">    navView.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class="line">            mDrawerLayout.closeDrawers();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId())&#123;</span><br><span class="line">        <span class="keyword">case</span> android.R.id.home:</span><br><span class="line">            mDrawerLayout.openDrawer(GravityCompat.START);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h3><p>在drawerLayout下，有两个子布局，其中第一个子布局定义背景，第二个子布局定义滑动栏的布局。背景布局相对复杂一点，一定记得选一个合适的布局模式。</p><h3 id="关于布局中下拉刷新和下拉隐藏toolbar的方法"><a href="#关于布局中下拉刷新和下拉隐藏toolbar的方法" class="headerlink" title="关于布局中下拉刷新和下拉隐藏toolbar的方法"></a>关于布局中下拉刷新和下拉隐藏toolbar的方法</h3><p>下拉隐藏toolbar：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要先解决toolbar和下面的布局的遮挡问题，这时候需要引入android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.AppBarLayout</span>,在里面把toolbar加进去，之后把下面主要内容的布局中指定一个app:layout_behaviour=<span class="string">"@string/appbar_scrolling_view_behaviour"</span>，然后给toolbar中添加app:layout_scrollFlags=<span class="string">"scroll|enterAlways|snap"</span>属性</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://icewinechen.com/2018/10/21/android-bungumi/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2018番剧阶段总结</title>
      <link>https://icewinechen.com/2018/10/03/animal/</link>
      <guid>https://icewinechen.com/2018/10/03/animal/</guid>
      <pubDate>Wed, 03 Oct 2018 14:43:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;吹水&quot;&gt;&lt;a href=&quot;#吹水&quot; class=&quot;headerlink&quot; title=&quot;吹水&quot;&gt;&lt;/a&gt;吹水&lt;/h2&gt;&lt;p&gt;趁着放假看了动物世界，怎么说呢，还行，挺好看，值得一看的电影，可以给个七分。李易峰风评可以逆转了，表现的确实不错。&lt;/p&gt;
&lt;p&gt;那这跟番剧总结有啥关系啊……当然有啊，七月番管理利根川啊……看完利根川和动物世界，觉得最近可以补一下赌博默示录。&lt;/p&gt;
&lt;p&gt;其实今年挺惨淡。热门原创几乎全扑街，一月京紫，国家队，FE三大热门全凉，四月大热拳击只能说不温不火吧，明日之丈压缩过份了，剧情对不起作画，七月更是没啥好说的，亲妈飞扬自闭羽毛球也是服的不行。在娘化少女系作品横飞的时代，今年还真就南极，露营沙滩打排球能看的，蛮神奇的。从部分值得说说的东西提起吧。&lt;/p&gt;
&lt;h3 id=&quot;ditf&quot;&gt;&lt;a href=&quot;#ditf&quot; class=&quot;headerlink&quot; title=&quot;ditf&quot;&gt;&lt;/a&gt;ditf&lt;/h3&gt;&lt;p&gt;这个我真是无话可说……超神的前半季，19集以前都可以接受，20话开始急转直下，看完以后我都不敢说我跟人推荐过这玩意。今石洋之+锦织敦史可以搞出天元突破，斩服少女这种东西，俩人都打下手可以出flcl这种好看的神经病作品，但是sb锦织+今石就能做出这种剧情四不像节奏秘制尴尬的东西，后期节奏简直迷得一塌糊涂，不知道的以为自己看了生育宣传片=-=&lt;/p&gt;
&lt;h3 id=&quot;京紫&quot;&gt;&lt;a href=&quot;#京紫&quot; class=&quot;headerlink&quot; title=&quot;京紫&quot;&gt;&lt;/a&gt;京紫&lt;/h3&gt;&lt;p&gt;没啥说的，京都大型作画宣传。我还是等明年京吹剧场吧。今年京都最好的作品大概是中二病剧场。京紫很好，就是不太对的起大家期待，自家文库质量确实不行，不如继续跟角川合作吧，不需要凉宫冰菓这种，再出一部轻音少女水平的作品就好了，京紫这带制作，真的可惜了。不是很推荐，但是补番优先级比国家队高。&lt;/p&gt;
&lt;h3 id=&quot;FELE&quot;&gt;&lt;a href=&quot;#FELE&quot; class=&quot;headerlink&quot; title=&quot;FELE&quot;&gt;&lt;/a&gt;FELE&lt;/h3&gt;&lt;p&gt;月球试验作品，其实我觉得还蛮不错的，了解一点背景去看，蛮有意思的，就是新房不该穿插那么多意识流，感觉还不错，就是分割放送有点尴尬，其实我觉得内涵主题和打斗表现都还可以。&lt;/p&gt;
&lt;h3 id=&quot;排球露营南极&quot;&gt;&lt;a href=&quot;#排球露营南极&quot; class=&quot;headerlink&quot; title=&quot;排球露营南极&quot;&gt;&lt;/a&gt;排球露营南极&lt;/h3&gt;&lt;p&gt;三个放一起，因为通篇只有推荐。看着很舒服，不说多好，但是看起来真的很舒服，不费心思，尤其露营。都推荐看看。&lt;/p&gt;
&lt;h3 id=&quot;石头门0&quot;&gt;&lt;a href=&quot;#石头门0&quot; class=&quot;headerlink&quot; title=&quot;石头门0&quot;&gt;&lt;/a&gt;石头门0&lt;/h3&gt;&lt;p&gt;都被吹爆了,事实上我没这感觉……唯一值得称道的可能就是第八集助手的短信圆了本篇的SG本篇的问题：助手到底发了啥？事实上SG0有个非常重要的问题：amadeus加戏有点多。嘟嘟噜的主场在前半段都快被amadeus打爆了。而且在36年的跳跃略去不少原作细节，这也没办法，但是我觉得角色定位和表达出了问题，花田写出这样的脚本没问题，原脚本林直孝难道不知道自己游戏里写了啥？八分可以给，再高真不行……&lt;/p&gt;
&lt;h3 id=&quot;megalo-box&quot;&gt;&lt;a href=&quot;#megalo-box&quot; class=&quot;headerlink&quot; title=&quot;megalo box&quot;&gt;&lt;/a&gt;megalo box&lt;/h3&gt;&lt;p&gt;一开始吹爆，后续大概给8分吧。我觉得剧情和节奏都还好，就是打拳部分不够多。运动番我觉得现在陷入了一个问题，就是不知道主题在哪。如果走热血路线，多渲染赛场气氛；打青春路线，安达充的作品照着模板做就行了，但是megalo box有点想都做到好，结果各方面都不错，但都差一点。音乐是真不错，看是绝对值得看。&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="吹水"><a href="#吹水" class="headerlink" title="吹水"></a>吹水</h2><p>趁着放假看了动物世界，怎么说呢，还行，挺好看，值得一看的电影，可以给个七分。李易峰风评可以逆转了，表现的确实不错。</p><p>那这跟番剧总结有啥关系啊……当然有啊，七月番管理利根川啊……看完利根川和动物世界，觉得最近可以补一下赌博默示录。</p><p>其实今年挺惨淡。热门原创几乎全扑街，一月京紫，国家队，FE三大热门全凉，四月大热拳击只能说不温不火吧，明日之丈压缩过份了，剧情对不起作画，七月更是没啥好说的，亲妈飞扬自闭羽毛球也是服的不行。在娘化少女系作品横飞的时代，今年还真就南极，露营沙滩打排球能看的，蛮神奇的。从部分值得说说的东西提起吧。</p><h3 id="ditf"><a href="#ditf" class="headerlink" title="ditf"></a>ditf</h3><p>这个我真是无话可说……超神的前半季，19集以前都可以接受，20话开始急转直下，看完以后我都不敢说我跟人推荐过这玩意。今石洋之+锦织敦史可以搞出天元突破，斩服少女这种东西，俩人都打下手可以出flcl这种好看的神经病作品，但是sb锦织+今石就能做出这种剧情四不像节奏秘制尴尬的东西，后期节奏简直迷得一塌糊涂，不知道的以为自己看了生育宣传片=-=</p><h3 id="京紫"><a href="#京紫" class="headerlink" title="京紫"></a>京紫</h3><p>没啥说的，京都大型作画宣传。我还是等明年京吹剧场吧。今年京都最好的作品大概是中二病剧场。京紫很好，就是不太对的起大家期待，自家文库质量确实不行，不如继续跟角川合作吧，不需要凉宫冰菓这种，再出一部轻音少女水平的作品就好了，京紫这带制作，真的可惜了。不是很推荐，但是补番优先级比国家队高。</p><h3 id="FELE"><a href="#FELE" class="headerlink" title="FELE"></a>FELE</h3><p>月球试验作品，其实我觉得还蛮不错的，了解一点背景去看，蛮有意思的，就是新房不该穿插那么多意识流，感觉还不错，就是分割放送有点尴尬，其实我觉得内涵主题和打斗表现都还可以。</p><h3 id="排球露营南极"><a href="#排球露营南极" class="headerlink" title="排球露营南极"></a>排球露营南极</h3><p>三个放一起，因为通篇只有推荐。看着很舒服，不说多好，但是看起来真的很舒服，不费心思，尤其露营。都推荐看看。</p><h3 id="石头门0"><a href="#石头门0" class="headerlink" title="石头门0"></a>石头门0</h3><p>都被吹爆了,事实上我没这感觉……唯一值得称道的可能就是第八集助手的短信圆了本篇的SG本篇的问题：助手到底发了啥？事实上SG0有个非常重要的问题：amadeus加戏有点多。嘟嘟噜的主场在前半段都快被amadeus打爆了。而且在36年的跳跃略去不少原作细节，这也没办法，但是我觉得角色定位和表达出了问题，花田写出这样的脚本没问题，原脚本林直孝难道不知道自己游戏里写了啥？八分可以给，再高真不行……</p><h3 id="megalo-box"><a href="#megalo-box" class="headerlink" title="megalo box"></a>megalo box</h3><p>一开始吹爆，后续大概给8分吧。我觉得剧情和节奏都还好，就是打拳部分不够多。运动番我觉得现在陷入了一个问题，就是不知道主题在哪。如果走热血路线，多渲染赛场气氛；打青春路线，安达充的作品照着模板做就行了，但是megalo box有点想都做到好，结果各方面都不错，但都差一点。音乐是真不错，看是绝对值得看。<br><a id="more"></a></p><h3 id="lost-song-island"><a href="#lost-song-island" class="headerlink" title="lost song + island"></a>lost song + island</h3><p>怎么说呢，这种轮回系作品我觉得放一块说比较好。其实lost song我觉得兑现上限了，毕竟12集的季番，又是原创作品不能要求太多。总体很不错了，但是得耐住前七集那个非常无聊的门槛。</p><p>island怎么说呢……比cc动画强，和rewrite可以做朋友。我是有点失望，本来我很期待动画能做的好一点，虽然不可能。这种剧情悬疑型的gal改一般都死得很惨，毕竟按顺序叙述，很难把所有线的内容糅合进去，但是那么好的原作做成了这个奇形怪状真的没法说。最精华的冬篇做的实在太赶了，导致最精华的部分和传说的叙事，轮回的结构都没描述清楚。gal改大概除了白2都是挺失败的，结果白2 cc篇也没影子了。想看cc雪菜线动画化。啊好难受啊……为啥游戏改没有大制作相中呢。看到自己很喜欢的游戏改成这个鬼样子还是有点伤心的。</p><h3 id="宅腐恋-多田君"><a href="#宅腐恋-多田君" class="headerlink" title="宅腐恋 + 多田君"></a>宅腐恋 + 多田君</h3><p>这俩放一块其实也是因为类型问题。冲着动画工坊看了多田君不恋爱，略失望，叙事有点乱，不够轻松，老老实实做月刊少女2不好么？</p><p>宅腐恋还成，日常看着舒服，对于爱看日常系的人来说值得一看。</p><h3 id="工作细胞"><a href="#工作细胞" class="headerlink" title="工作细胞"></a>工作细胞</h3><p>放心去看吧，没啥大问题，也没啥特别好的地方。题材很有趣，我觉得okay。</p><h3 id="天狼"><a href="#天狼" class="headerlink" title="天狼"></a>天狼</h3><p>不知所云，逻辑诡异，评价不高，感觉是给洋鬼子交差的作品。设定大乱炖，打斗倒不错。</p><h3 id="上学-碧蓝-游戏三人娘"><a href="#上学-碧蓝-游戏三人娘" class="headerlink" title="上学+碧蓝+游戏三人娘"></a>上学+碧蓝+游戏三人娘</h3><p>都可以看，还是挺有趣的</p><h3 id="我英第三季"><a href="#我英第三季" class="headerlink" title="我英第三季"></a>我英第三季</h3><p>神野之战吹爆，我觉得比漫画做的好，看的我热血沸腾。这季收尾节奏不好，临时执照片不该那么多原创拖剧情节奏的。但是冲着神野之战我可以给10分，骨头社吹爆！第四季制作放了，稳得一批。</p><h3 id="overload"><a href="#overload" class="headerlink" title="overload"></a>overload</h3><p>看过1 2可以看，说实话我并不喜欢这番，看也都是跳着看。感觉可以不带脑子当无脑看爽文还可以，不过不失的作品吧……感觉价值观有点不对，不是很推荐</p><h3 id="喰种"><a href="#喰种" class="headerlink" title="喰种"></a>喰种</h3><p>想不出谁给它的勇气分割放送，做的跟ppt一样，分镜混乱，剧情跳跃，但是冲着漫画圆满完结的份上给点面子，继续看看吧。监狱篇和流岛篇其实还可以。</p><h3 id="p5"><a href="#p5" class="headerlink" title="p5"></a>p5</h3><p>绝望级别的制作。回头再打一遍游戏解毒吧，动画别看了，灾难级的作画。</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>其他的一时半会想不起来了。回头再说。10月7刀剑来啦，年番，目前微博日推大佬放出的片段可以说制作很稳。有的看了。</p>]]></content:encoded>
      
      <comments>https://icewinechen.com/2018/10/03/animal/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
